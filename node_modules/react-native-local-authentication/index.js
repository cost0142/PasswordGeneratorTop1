/**
 * @providesModule RNLocalAuthentication
 * @flow
 */

import {
  NativeModules
} from 'react-native';

const { RNLocalAuthentication } = NativeModules;

export const LABiometryType = {
  none: 'none',
  touchID: 'touchID',
  faceID: 'faceID'
};

export const LAError = {
  LAErrorAuthenticationFailed: -1,
  LAErrorUserCancel: -2,
  LAErrorUserFallback: -3,
  LAErrorSystemCancel: -4,
  LAErrorPasscodeNotSet: -5,
  LAErrorTouchIDNotAvailable: -6,
  LAErrorTouchIDNotEnrolled: -7,
  LAErrorTouchIDLockout: -8,
  LAErrorAppCancel: -9,
  LAErrorInvalidContext: -10,
  LAErrorNotInteractive: -1004,
  LAErrorBiometryNotAvailable: -6,
  LAErrorBiometryNotEnrolled: -7,
  LAErrorBiometryLockout: -8,
}

function setLocalizedFallbackTitle(title) {
  return RNLocalAuthentication && RNLocalAuthentication.setLocalizedFallbackTitle && RNLocalAuthentication.setLocalizedFallbackTitle(title);
}

function setLocalizedCancelTitle(title) {
  return RNLocalAuthentication && RNLocalAuthentication.setLocalizedCancelTitle && RNLocalAuthentication.setLocalizedCancelTitle(title);
}

function canEvaluate(policy = 1) {
  return RNLocalAuthentication && RNLocalAuthentication.canEvaluate && RNLocalAuthentication.canEvaluate(policy);
}

function evaluate(policy = 1, localizedReason) {
  return RNLocalAuthentication && RNLocalAuthentication.evaluate && RNLocalAuthentication.evaluate(policy, localizedReason);
}

function invalidate() {
  return RNLocalAuthentication && RNLocalAuthentication.invalidate && RNLocalAuthentication.invalidate();
}

export default {
  setLocalizedFallbackTitle,
  setLocalizedCancelTitle,
  canEvaluate,
  evaluate,
  invalidate
};
